import * as ccxt from 'ccxt';
import { Connection, Keypair, PublicKey  } from '@solana/web3.js';
import * as anchor from '@coral-xyz/anchor';
import { AnchorProvider, Wallet } from '@coral-xyz/anchor';
import * as drift from '@drift-labs/sdk';

import { dydxV4OrderParams, AlertObject, OrderResult } from '../../types';
import {
        _sleep,
        calculateProfit,
        doubleSizeIfReverseOrder
} from '../../helper';
import 'dotenv/config';
import { OrderSide, OrderType } from '@dydxprotocol/v4-client-js';
import { AbstractDexClient } from '../abstractDexClient';
import { Mutex } from 'async-mutex';
import { CustomLogger } from '../logger/logger.service';
import * as bip39 from 'bip39';
import { derivePath } from 'ed25519-hd-key';

export function keypairFromMnemonic(mnemonic: string): Keypair {
  const seed = bip39.mnemonicToSeedSync(mnemonic);
  const path = `m/44'/501'/0'/0'`; // Phantom Default
  const { key } = derivePath(path, seed.toString('hex'));
  return Keypair.fromSeed(key);
}

export class DriftClient extends AbstractDexClient {
	private client: drift.DriftClient;
	private readonly wallet: Wallet;
	private readonly logger: CustomLogger;	
	private marketIndexMap: Map<string, drift.PerpMarketAccount> = new Map<string, drift.PerpMarketAccount>();
	private readyPromise: Promise<void>;
	constructor() {
		super();

		this.logger = new CustomLogger('Drift');

		if (
			!process.env.DRIFT_MNEMONIC || !process.env.DRIFT_RPC_SERVER
		) {
			this.logger.warn('Credentials are not set as environment variable');
			return;
		}
		const keypair = keypairFromMnemonic(process.env.DRIFT_MNEMONIC);
                this.wallet = new Wallet(keypair);
		
		this.readyPromise = this.initClient();
	}

	private async initClient() 
	{
		const env = 'mainnet-beta';

		// Initialize Drift SDK
		const sdkConfig = drift.initialize({ env });
		const connection = new Connection(process.env.DRIFT_RPC_SERVER);
		const provider = new AnchorProvider(
		        connection, this.wallet,
		        {
		            preflightCommitment: 'confirmed',
		            skipPreflight: false,
		            commitment: 'confirmed',
		        }
		    );
		const driftPublicKey = new PublicKey(sdkConfig.DRIFT_PROGRAM_ID);
		this.client = new drift.DriftClient({ connection: provider.connection, wallet: provider.wallet,  programID: driftPublicKey });

		await this.client.subscribe();    
		this.client.getPerpMarketAccounts().forEach(market => {
		  const name = Buffer.from(market.name).toString("utf-8").replace(/\0/g, "");
		  this.marketIndexMap.set(name, market);
		});
	}

	private async checkSubscriptionHealth() 
	{
	  const isSubscribed = false

	  if (!isSubscribed) {
	    this.logger.warn('Subscription verloren, erneutes Abonnieren...');
	    await this.client.unsubscribe();
	    await this.client.subscribe();
	  } 
	}

	public async getIsAccountReady(): Promise<boolean> {
		try {
			// Fetched balance indicates connected wallet
		//	await this.client.fetchBalance();
			return true;
		} catch (e) {
			return false;
		}
	}

	private async buildOrderParams(alertMessage: AlertObject) {
		const orderSide =
			alertMessage.order == 'buy' ? OrderSide.BUY : OrderSide.SELL;

		const latestPrice = alertMessage.price;
		this.logger.log('latestPrice', latestPrice);

		let orderSize: number;
		orderSize = alertMessage.size;

		orderSize = doubleSizeIfReverseOrder(alertMessage, orderSize);

		const market = alertMessage.market.replace(/_/g, '-');

		const orderParams: dydxV4OrderParams = {
			market,
			side: orderSide,
			size: Number(orderSize),
			price: Number(alertMessage.price)
		};
		this.logger.log('orderParams', orderParams);
		return orderParams;
	}

	public async placeOrder(
		alertMessage: AlertObject,
		openedPositions: drift.PerpPosition[],
		mutex: Mutex
	) {
		const orderParams = await this.buildOrderParams(alertMessage);

		const market = orderParams.market;
		const type = OrderType.LIMIT;
		const side = orderParams.side;
		const mode = process.env.HYPERLIQUID_MODE || '';
		const direction = alertMessage.direction;

		if (side === OrderSide.BUY && mode.toLowerCase() === 'onlysell') return;

		const timeInForce = 'gtc';
		const slippagePercentage = parseFloat(alertMessage.slippagePercentage); // Get from alert
		const vaultAddress = process.env.HYPERLIQUID_VAULT_ADDRESS;
		const orderMode = alertMessage.orderMode || '';
		const newPositionSize = alertMessage.newPositionSize;
		const price =
			side == OrderSide.BUY
				? orderParams.price * ((100 + slippagePercentage) / 100)
				: orderParams.price * ((100 - slippagePercentage) / 100);

		let size = orderParams.size;

		const perpMarketAccount = this.marketIndexMap[market];
		if(perpMarketAccount == undefined )
		{
                                this.logger.error(
                                        `Market not exists in map`
                                );
		}

		if (
			(side === OrderSide.SELL && direction === 'long') ||
			(side === OrderSide.BUY && direction === 'short')
		) {
			// Hyperliquid group all positions in one position per symbol
			const position = openedPositions.find((el) =>  el.marketIndex === perpMarketAccount.marketIndex);

			if (!position) {
				this.logger.log('order is ignored because position not exists');
				return;
			}

 drift.convertToNumber(position.quoteEntryAmount, quotePrecision)//			const profit = calculateProfit(orderParams.price, drift.convertToNumber(position.quoteEntryAmount, quotePrecision)/Math.abs(drift.convertToNudrift.convertToNumber(position.baseAssetAmount, basePrecision)mber(position.baseAssetAmount, basePrecision)));
			const profit = 0;
			const minimumProfit =
				alertMessage.minProfit ??
				parseFloat(process.env.MINIMUM_PROFIT_PERCENT);

			if (
				(direction === 'long' && profit < minimumProfit) ||
				(direction === 'short' && -1 * profit < minimumProfit)
			) {
				this.logger.log(
					`Order is ignored because profit level not reached: current profit ${profit}, direction ${direction}`
				);
				return;
			}

			const sum = Math.abs(position.baseAssetAmount);

			size =
				orderMode === 'full' || newPositionSize == 0
					? sum
					: Math.min(size, sum);
		} else if (orderMode === 'full' || newPositionSize == 0) {
			const position = openedPositions.find((el) => el.marketIndex === perpMarketAccount.marketIndex);
			if (!position) {
				if (newPositionSize == 0) {
					this.logger.log(
						'ignore this order because new position size is 0 and current position not exists'
					);
					return;
				}
			} else {
				if (
					(side === OrderSide.SELL && position.baseAssetAmount > 0) ||
					(side === OrderSide.BUY && position.baseAssetAmount < 0)
				)
					size = Math.abs(position.baseAssetAmount);
			}
		}

		const postOnly = false;
		const reduceOnly = false;

		const fillWaitTime =
			parseInt(process.env.FILL_WAIT_TIME_SECONDS) * 1000 || 300 * 1000; // 5 minutes by default

		const clientId = this.generateRandomHexString(32);
		this.logger.log('Client ID: ', clientId);

		// For cancelling if needed
		let orderId: string;

		// This solution fixes problem of two parallel calls in exchange, which is not possible
		//		const release = await mutex.acquire();

		try {
		//	const result = await this.client.createOrder(
		//		market,
		//		type,
		//		side,
		//		size,
		//		price,
		//		{
		//			clientOrderId: clientId,
		//			timeInForce,
		//			postOnly,
		//			reduceOnly,
		//			...(vaultAddress && { vaultAddress })
		//		}
		//	);
			this.logger.log('Transaction sent');
		} catch (e) {
			console.error(e);
		} finally {
			//			release();
		}
		
		const orderResult: OrderResult = {
			side: orderParams.side,
			size: orderParams.size,
			orderId: undefined
		};

		return orderResult;
	}

	private generateRandomHexString(size: number): string {
		return `0x${[...Array(size)]
			.map(() => Math.floor(Math.random() * 16).toString(16))
			.join('')}`;
	}

	private isOrderFilled = async (
		orderId: string,
		market: string,
		params: { user?: string }
	): Promise<boolean> => {
//		const order = await this.client.fetchOrder(orderId, market, params);

//		this.logger.log('Order ID: ', order.id);

//		return order.status == 'closed';
		return true;
	};

	public getOpenedPositions = async (): Promise<drift.PerpPosition[]> =>
	{
		await this.readyPromise;
		const userAccount = this.client.getUser().getUserAccount();
		const perpPositions = userAccount.perpPositions;
		return perpPositions.filter(p => !p.baseAssetAmount.isZero());
	};
}
